---
name: Create a issue for broken links

on:
  # yamllint disable-line rule:empty-values
  push:
  schedule:
    - cron: "00 00 * * *"

jobs:
  check:
    uses: ./.github/workflows/check-broken-links.yml

  search-issue-to-update:
    name: Search issue to update
    needs: check
    if: always() &&
      needs.check.result == 'failure' &&
      needs.check.outputs.report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      issue-number: ${{ steps.search.outputs.issue-number}}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Search Issue
        id: search
        run: |
          number=$(
            gh issue list \
              --search 'Link Checker Report in:title' \
              --label 'good first issue' \
              --label 'documentation' \
              --label 'report' \
              --label 'automated issue' \
              --state open \
              --json number \
              --jq '.[].number' \
              --limit 1 \
              --repo ${{ github.repository }}
          )
          echo "issue-number=$number" >> "${GITHUB_OUTPUT}"

  update-issue-body:
    name: Update issue body
    needs:
      - check
      - search-issue-to-update
    if: always() &&
      needs.check.outputs.report &&
      needs.search-issue-to-update.outputs.issue-number
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Update issue
        run: |
          gh issue edit \
            "${{needs.search-issue-to-update.outputs.issue-number}}" \
            --body "${{ needs.check.outputs.report }}" \
            --repo ${{ github.repository }}

  create-issue:
    name: Create issue for report of lychee
    needs:
      - check
      - search-issue-to-update
    if: always() &&
      needs.check.outputs.report &&
      !needs.search-issue-to-update.outputs.issue-number
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Create the labels to be used
        run: |
          names=(
            'documentation'
            'good first issue'
            'report'
            'automated issue'
          )
          for name in "${names[@]}"; do
            existing=$(
              gh label list \
                --json name \
                --jq .[].name \
                --repo ${{ github.repository }}
             )
            if [[ "$existing" != *"$name"* ]]; then
              gh label create "$name" --repo ${{ github.repository }}
            fi
          done

      - name: Create issue from report of lychee
        run: |
          gh issue create \
            --title 'Link Checker Report' \
            --body "${{ needs.check.outputs.report }}" \
            --label documentation \
            --label 'good first issue' \
            --label report \
            --label 'automated issue' \
            --repo ${{ github.repository }}
